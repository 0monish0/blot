import { k as createVNode, F as Fragment, l as spreadAttributes } from "./astro.ddd8ab85.mjs";
import "cookie";
import "kleur/colors";
import "path-to-regexp";
import "mime";
import "string-width";
import "html-escaper";
const images = {};
function updateImageReferences(html2) {
  return html2.replaceAll(
    /__ASTRO_IMAGE_="([^"]+)"/gm,
    (full, imagePath) => spreadAttributes({ src: images[imagePath].src, ...images[imagePath].attributes })
  );
}
const html = updateImageReferences('<h1 id="cubic-disarray">Cubic Disarray</h1>\n<p><strong><em>Georg Nees</em></strong> was a pioneer of digital art, responsible for interesting works like Cubic Disarray.</p>\n<img src="https://www.seekingoutside.com/wp-content/uploads/2018/12/Screen-Shot-2018-12-11-at-3.40.46-AM-480x670.png" width="512">\n<p>Let’s try to recreate this in the Haxidraw editor. A good first step to reverse engineering any artwork is to break it down into the obvious components. There’s a grid of squares, and the squares closer to the bottom seem to be rotated more and more.</p>\n<p>We can get started by setting up a turtle, and define some constants:</p>\n<pre is:raw="" class="astro-code github-dark" style="background-color: #24292e; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">t</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">createTurtle</span><span style="color: #E1E4E8">();</span></span>\n<span class="line"><span style="color: #B392F0">drawTurtles</span><span style="color: #E1E4E8">(t);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">size</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">10</span><span style="color: #E1E4E8">;</span></span>\n<span class="line"><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">squareSize</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">;</span></span></code></pre>\n<p>Obviously we’ll need a way to draw these rotated squares, so let’s define a function for that:</p>\n<pre is:raw="" class="astro-code github-dark" style="background-color: #24292e; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color: #F97583">function</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">draw</span><span style="color: #E1E4E8">(</span><span style="color: #FFAB70">x</span><span style="color: #E1E4E8">, </span><span style="color: #FFAB70">y</span><span style="color: #E1E4E8">, </span><span style="color: #FFAB70">width</span><span style="color: #E1E4E8">, </span><span style="color: #FFAB70">height</span><span style="color: #E1E4E8">, </span><span style="color: #FFAB70">theta</span><span style="color: #E1E4E8">) {</span></span>\n<span class="line"><span style="color: #E1E4E8">  t.</span><span style="color: #B392F0">up</span><span style="color: #E1E4E8">()</span></span>\n<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #F97583">let</span><span style="color: #E1E4E8"> startX </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> x </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> height</span><span style="color: #F97583">/</span><span style="color: #79B8FF">2</span></span>\n<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #F97583">let</span><span style="color: #E1E4E8"> startY </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> y </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> height</span><span style="color: #F97583">/</span><span style="color: #79B8FF">2</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #E1E4E8">  t.</span><span style="color: #B392F0">goto</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">rotatePoints</span><span style="color: #E1E4E8">(x, y, startX, startY, theta))</span></span>\n<span class="line"><span style="color: #E1E4E8">  t.</span><span style="color: #B392F0">down</span><span style="color: #E1E4E8">()</span></span>\n<span class="line"><span style="color: #E1E4E8">  t.</span><span style="color: #B392F0">goto</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">rotatePoints</span><span style="color: #E1E4E8">(x, y, startX </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> width, startY, theta))</span></span>\n<span class="line"><span style="color: #E1E4E8">  t.</span><span style="color: #B392F0">goto</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">rotatePoints</span><span style="color: #E1E4E8">(x, y, startX </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> width, startY </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> height, theta))</span></span>\n<span class="line"><span style="color: #E1E4E8">  t.</span><span style="color: #B392F0">goto</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">rotatePoints</span><span style="color: #E1E4E8">(x, y, startX, startY </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> height, theta))</span></span>\n<span class="line"><span style="color: #E1E4E8">  t.</span><span style="color: #B392F0">goto</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">rotatePoints</span><span style="color: #E1E4E8">(x, y, startX, startY, theta))</span></span>\n<span class="line"><span style="color: #E1E4E8">  t.</span><span style="color: #B392F0">up</span><span style="color: #E1E4E8">()</span></span>\n<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre>\n<p>This function takes in a <code>x</code>, <code>y</code> position, along with a <code>width</code> and <code>height</code> for the square. Lastly, we’ll want a <code>theta</code> to rotate the points by. The function works by creating a square path, and rotating it around the center by a given amount. We still need to define how to do this rotation, though.</p>\n<p>This can be done using the sine and cosine functions. They decompose a given angle into an x and y component, which we can use to preform the rotation. The function takes in:</p>\n<ul>\n<li>An origin x and y to rotate around</li>\n<li>The x and y to rotate</li>\n<li>The angle to rotate by</li>\n</ul>\n<p>It then returns the rotated points as an array.</p>\n<pre is:raw="" class="astro-code github-dark" style="background-color: #24292e; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color: #F97583">function</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">rotatePoints</span><span style="color: #E1E4E8">(</span><span style="color: #FFAB70">ox</span><span style="color: #E1E4E8">, </span><span style="color: #FFAB70">oy</span><span style="color: #E1E4E8">, </span><span style="color: #FFAB70">x</span><span style="color: #E1E4E8">, </span><span style="color: #FFAB70">y</span><span style="color: #E1E4E8">, </span><span style="color: #FFAB70">theta</span><span style="color: #E1E4E8">) {</span></span>\n<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">let</span><span style="color: #E1E4E8"> dx </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> x </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> ox</span></span>\n<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">let</span><span style="color: #E1E4E8"> dy </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> y </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> oy</span></span>\n<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">let</span><span style="color: #E1E4E8"> newX </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> dx </span><span style="color: #F97583">*</span><span style="color: #E1E4E8"> Math.</span><span style="color: #B392F0">cos</span><span style="color: #E1E4E8">(theta) </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> dy </span><span style="color: #F97583">*</span><span style="color: #E1E4E8"> Math.</span><span style="color: #B392F0">sin</span><span style="color: #E1E4E8">(theta)</span></span>\n<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">let</span><span style="color: #E1E4E8"> newY </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> dx </span><span style="color: #F97583">*</span><span style="color: #E1E4E8"> Math.</span><span style="color: #B392F0">sin</span><span style="color: #E1E4E8">(theta) </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> dy </span><span style="color: #F97583">*</span><span style="color: #E1E4E8"> Math.</span><span style="color: #B392F0">cos</span><span style="color: #E1E4E8">(theta)</span></span>\n<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> [newX </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> ox, newY </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> oy]</span></span>\n<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre>\n<p>Great, we’re almost done! Now it’s down to simply drawing the grid. Loop over every x and y in some range, and draw a square there. We rotate them by a random amount, scaled proportional to how low the square is on the screen.</p>\n<pre is:raw="" class="astro-code github-dark" style="background-color: #24292e; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (</span><span style="color: #F97583">let</span><span style="color: #E1E4E8"> x </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">; x </span><span style="color: #F97583">&#x3C;</span><span style="color: #E1E4E8"> size; x</span><span style="color: #F97583">++</span><span style="color: #E1E4E8">) {</span></span>\n<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (</span><span style="color: #F97583">let</span><span style="color: #E1E4E8"> y </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">; y </span><span style="color: #F97583">&#x3C;</span><span style="color: #E1E4E8"> size; y</span><span style="color: #F97583">++</span><span style="color: #E1E4E8">) {</span></span>\n<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #B392F0">draw</span><span style="color: #E1E4E8">(x, y, squareSize, squareSize, (Math.</span><span style="color: #B392F0">random</span><span style="color: #E1E4E8">()</span><span style="color: #F97583">-</span><span style="color: #79B8FF">0.5</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">*</span><span style="color: #E1E4E8"> ((</span><span style="color: #79B8FF">10</span><span style="color: #F97583">-</span><span style="color: #E1E4E8">y)</span><span style="color: #F97583">/</span><span style="color: #79B8FF">10</span><span style="color: #E1E4E8">))</span></span>\n<span class="line"><span style="color: #E1E4E8">  }</span></span>\n<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre>\n<p>And, you’re done! The final result should look something like this in the editor:</p>\n<img src="https://cloud-ot8pxbd0h-hack-club-bot.vercel.app/0image.png" width="512">');
const frontmatter = { "title": "Cubic Disarray", "description": "**_Georg Nees_** was a pioneer of digital art, responsible for interesting works like Cubic Disarray.\n", "thumbnail": "https://www.seekingoutside.com/wp-content/uploads/2018/12/Screen-Shot-2018-12-11-at-3.40.46-AM-480x670.png" };
const file = "/Users/jchen/Documents/Programming/prs/haxidraw/astro/src/content/workshops/cubic_disarray.md";
const url = void 0;
function rawContent() {
  return "\n\n# Cubic Disarray\n\n**_Georg Nees_** was a pioneer of digital art, responsible for interesting works like Cubic Disarray.\n\n<img src=\"https://www.seekingoutside.com/wp-content/uploads/2018/12/Screen-Shot-2018-12-11-at-3.40.46-AM-480x670.png\" width=\"512\"/>\n\nLet's try to recreate this in the Haxidraw editor. A good first step to reverse engineering any artwork is to break it down into the obvious components. There's a grid of squares, and the squares closer to the bottom seem to be rotated more and more.\n\nWe can get started by setting up a turtle, and define some constants:\n\n```js\nconst t = createTurtle();\ndrawTurtles(t);\n\nconst size = 10;\nconst squareSize = 1;\n```\n\nObviously we'll need a way to draw these rotated squares, so let's define a function for that:\n\n```js\nfunction draw(x, y, width, height, theta) {\n  t.up()\n  let startX = x - height/2\n  let startY = y - height/2\n\n  t.goto(rotatePoints(x, y, startX, startY, theta))\n  t.down()\n  t.goto(rotatePoints(x, y, startX + width, startY, theta))\n  t.goto(rotatePoints(x, y, startX + width, startY + height, theta))\n  t.goto(rotatePoints(x, y, startX, startY + height, theta))\n  t.goto(rotatePoints(x, y, startX, startY, theta))\n  t.up()\n}\n```\n\nThis function takes in a `x`, `y` position, along with a `width` and `height` for the square. Lastly, we'll want a `theta` to rotate the points by. The function works by creating a square path, and rotating it around the center by a given amount. We still need to define how to do this rotation, though.\n\nThis can be done using the sine and cosine functions. They decompose a given angle into an x and y component, which we can use to preform the rotation. The function takes in:\n\n- An origin x and y to rotate around\n- The x and y to rotate\n- The angle to rotate by\n\nIt then returns the rotated points as an array.\n\n```js\nfunction rotatePoints(ox, oy, x, y, theta) {\n    let dx = x - ox\n    let dy = y - oy\n    let newX = dx * Math.cos(theta) - dy * Math.sin(theta)\n    let newY = dx * Math.sin(theta) + dy * Math.cos(theta)\n    return [newX + ox, newY + oy]\n}\n```\n\nGreat, we're almost done! Now it's down to simply drawing the grid. Loop over every x and y in some range, and draw a square there. We rotate them by a random amount, scaled proportional to how low the square is on the screen.\n\n```js\nfor (let x = 0; x < size; x++) {\n  for (let y = 0; y < size; y++) {\n    draw(x, y, squareSize, squareSize, (Math.random()-0.5) * ((10-y)/10))\n  }\n}\n```\n\nAnd, you're done! The final result should look something like this in the editor:\n\n<img src=\"https://cloud-ot8pxbd0h-hack-club-bot.vercel.app/0image.png\" width=\"512\"/>\n";
}
function compiledContent() {
  return html;
}
function getHeadings() {
  return [{ "depth": 1, "slug": "cubic-disarray", "text": "Cubic Disarray" }];
}
async function Content() {
  const { layout, ...content } = frontmatter;
  content.file = file;
  content.url = url;
  const contentFragment = createVNode(Fragment, { "set:html": html });
  return contentFragment;
}
Content[Symbol.for("astro.needsHeadRendering")] = true;
export {
  Content,
  compiledContent,
  Content as default,
  file,
  frontmatter,
  getHeadings,
  images,
  rawContent,
  url
};
