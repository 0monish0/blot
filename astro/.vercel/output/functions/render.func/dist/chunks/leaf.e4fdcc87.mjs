import { k as createVNode, F as Fragment, l as spreadAttributes } from "./astro.ddd8ab85.mjs";
import "cookie";
import "kleur/colors";
import "path-to-regexp";
import "mime";
import "string-width";
import "html-escaper";
const images = {};
function updateImageReferences(html2) {
  return html2.replaceAll(
    /__ASTRO_IMAGE_="([^"]+)"/gm,
    (full, imagePath) => spreadAttributes({ src: images[imagePath].src, ...images[imagePath].attributes })
  );
}
const html = updateImageReferences('<h1 id="how-to-draw-a-leaf">How to draw a leaf</h1>\n<blockquote>\n<p>You can follow along in this editor: <a href="https://editor.haxidraw.hackclub.com/">https://editor.haxidraw.hackclub.com/</a></p>\n</blockquote>\n<hr>\n<p>Let’s learn how to draw a leaf that looks likes this.</p>\n<img width="389" alt="Screen Shot 2023-07-03 at 2 14 10 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/9ce96217-bc5e-49cc-87b2-178681188eb3">\n<p>Let’s break it down into parts.</p>\n<h2 id="outline">Outline</h2>\n<p>We’ll start with the outline of the leaf.</p>\n<img width="382" alt="Screen Shot 2023-07-03 at 2 16 33 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/7027b27a-cc5f-4565-9357-2c8fd1b21e6f">\n<p>First let’s lay down a line which will become the top edge.</p>\n<pre is:raw="" class="astro-code github-dark" style="background-color: #24292e; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">leafLength</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">5</span><span style="color: #E1E4E8">;</span></span>\n<span class="line"><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">leafW</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1.3</span><span style="color: #E1E4E8">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">edge</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">createTurtle</span><span style="color: #E1E4E8">().</span><span style="color: #B392F0">forward</span><span style="color: #E1E4E8">(leafLength);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #6A737D">// render the final leaf like such</span></span>\n<span class="line"><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">leaf</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">createTurtle</span><span style="color: #E1E4E8">().</span><span style="color: #B392F0">join</span><span style="color: #E1E4E8">(edge);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #B392F0">drawTurtles</span><span style="color: #E1E4E8">(leaf);</span></span></code></pre>\n<img width="366" alt="Screen Shot 2023-07-03 at 2 17 32 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/aa904051-d23a-4542-9da9-025cd658fc28">\n<p>Now we can warp the line by resampling points and then using <code>warp</code> with a bezier curve.</p>\n<pre is:raw="" class="astro-code github-dark" style="background-color: #24292e; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">edge</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">createTurtle</span><span style="color: #E1E4E8">()</span></span>\n<span class="line"><span style="color: #E1E4E8">  .</span><span style="color: #B392F0">forward</span><span style="color: #E1E4E8">(leafLength)</span></span>\n<span class="line"><span style="color: #E1E4E8">  .</span><span style="color: #B392F0">resample</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">0.01</span><span style="color: #E1E4E8">) </span><span style="color: #6A737D">// we resample to have points to bend</span></span>\n<span class="line"><span style="color: #E1E4E8">  .</span><span style="color: #B392F0">warp</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">bezierEasing</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">, [</span><span style="color: #79B8FF">0.4</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">2.58</span><span style="color: #E1E4E8">], [</span><span style="color: #79B8FF">0.52</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0.31</span><span style="color: #E1E4E8">], </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">)); </span><span style="color: #6A737D">// bezierEasing takes a start y, control point, control point, end y</span></span></code></pre>\n<img width="374" alt="Screen Shot 2023-07-03 at 2 19 18 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/1ed396a9-41bd-42d6-bd60-95dd8eea3719">\n<p>Let’s make the bottom edge too.</p>\n<pre is:raw="" class="astro-code github-dark" style="background-color: #24292e; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">bottom</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> edge.</span><span style="color: #B392F0">copy</span><span style="color: #E1E4E8">().</span><span style="color: #B392F0">scale</span><span style="color: #E1E4E8">([</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">, </span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">], [</span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">]);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">leaf</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">createTurtle</span><span style="color: #E1E4E8">().</span><span style="color: #B392F0">join</span><span style="color: #E1E4E8">(edge).</span><span style="color: #B392F0">join</span><span style="color: #E1E4E8">(bottom);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #B392F0">drawTurtles</span><span style="color: #E1E4E8">(leaf);</span></span></code></pre>\n<img width="378" alt="Screen Shot 2023-07-03 at 2 22 51 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/88b1ccfb-0811-49bf-80f5-ce3cf7c93609">\n<p>Now we can add some noise to make the leaf look a bit more organic.</p>\n<pre is:raw="" class="astro-code github-dark" style="background-color: #24292e; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color: #E1E4E8">edge.</span><span style="color: #B392F0">warp</span><span style="color: #E1E4E8">(</span></span>\n<span class="line"><span style="color: #E1E4E8">  (</span><span style="color: #FFAB70">t</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">=></span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">noise</span><span style="color: #E1E4E8">(t </span><span style="color: #F97583">*</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">20.4</span><span style="color: #E1E4E8">, { octaves: </span><span style="color: #79B8FF">2</span><span style="color: #E1E4E8"> }) </span><span style="color: #F97583">*</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0.09</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">*</span><span style="color: #E1E4E8"> (t </span><span style="color: #F97583">===</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">||</span><span style="color: #E1E4E8"> t </span><span style="color: #F97583">===</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">?</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">:</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">)</span></span>\n<span class="line"><span style="color: #E1E4E8">);</span></span>\n<span class="line"><span style="color: #E1E4E8">bottom.</span><span style="color: #B392F0">warp</span><span style="color: #E1E4E8">(</span></span>\n<span class="line"><span style="color: #E1E4E8">  (</span><span style="color: #FFAB70">t</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">=></span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">noise</span><span style="color: #E1E4E8">(t </span><span style="color: #F97583">*</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">23.6</span><span style="color: #E1E4E8">, { octaves: </span><span style="color: #79B8FF">2</span><span style="color: #E1E4E8"> }) </span><span style="color: #F97583">*</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">-</span><span style="color: #79B8FF">0.1</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">*</span><span style="color: #E1E4E8"> (t </span><span style="color: #F97583">===</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">||</span><span style="color: #E1E4E8"> t </span><span style="color: #F97583">===</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">?</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">:</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">)</span></span>\n<span class="line"><span style="color: #E1E4E8">);</span></span></code></pre>\n<p>This term <code>(t===0 || t === 1 ? 0 : 1)</code> makes sure that the endpoints stay the same on the curve.\nTry playing with the multiplication terms.</p>\n<img width="358" alt="Screen Shot 2023-07-03 at 2 23 45 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/d547cd78-ec67-4fbe-8c72-78363c611946">\n<p>Now we have an outline let’s do the veins of the leaf.</p>\n<h2 id="veins">Veins</h2>\n<p>After adding the veins our leaf will look like this.</p>\n<img width="347" alt="Screen Shot 2023-07-03 at 2 25 44 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/ad810112-ca58-48f4-8961-311cb7d44ec7">\n<p>We’ll start with the top side by drawing some lines the follow the distribution of the edge.\nLet’s make a veins function which will return some lines we can add to our main drawing.</p>\n<pre is:raw="" class="astro-code github-dark" style="background-color: #24292e; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color: #F97583">function</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">veins</span><span style="color: #E1E4E8">() {</span></span>\n<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">lines</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">createTurtle</span><span style="color: #E1E4E8">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #F97583">let</span><span style="color: #E1E4E8"> littleLinesMax </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">61</span><span style="color: #E1E4E8">;</span></span>\n<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (</span><span style="color: #F97583">let</span><span style="color: #E1E4E8"> i </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">4</span><span style="color: #E1E4E8">; i </span><span style="color: #F97583">&#x3C;</span><span style="color: #E1E4E8"> littleLinesMax </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">5</span><span style="color: #E1E4E8">; i</span><span style="color: #F97583">++</span><span style="color: #E1E4E8">) {</span></span>\n<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">t</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> i </span><span style="color: #F97583">/</span><span style="color: #E1E4E8"> (littleLinesMax </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">); </span><span style="color: #6A737D">// this line to get t values 0 to 1 while iterating is very common</span></span>\n<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">x0</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> t </span><span style="color: #F97583">*</span><span style="color: #E1E4E8"> leafLength;</span></span>\n<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">y0</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// try playing with the `0.1` term</span></span>\n<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// interpolate returns a point and we take `[1]` to get the y value</span></span>\n<span class="line"><span style="color: #E1E4E8">    y </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> edge.</span><span style="color: #B392F0">interpolate</span><span style="color: #E1E4E8">(t </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0.1</span><span style="color: #E1E4E8">)[</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">];</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">line</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">createTurtle</span><span style="color: #E1E4E8">([x0, y0]);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #E1E4E8">    line.</span><span style="color: #B392F0">right</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">-</span><span style="color: #79B8FF">70</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> t </span><span style="color: #F97583">*</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">37</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">randInRange</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">-</span><span style="color: #79B8FF">4</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">4</span><span style="color: #E1E4E8">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">let</span><span style="color: #E1E4E8"> r </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> y </span><span style="color: #F97583">*</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0.7</span><span style="color: #E1E4E8">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> (r </span><span style="color: #F97583">&#x3C;</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0.01</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">continue</span><span style="color: #E1E4E8">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #E1E4E8">    line.</span><span style="color: #B392F0">forward</span><span style="color: #E1E4E8">(r);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #E1E4E8">    lines.</span><span style="color: #B392F0">join</span><span style="color: #E1E4E8">(line);</span></span>\n<span class="line"><span style="color: #E1E4E8">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> lines;</span></span>\n<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre>\n<p>Which we add to the drawing like such.</p>\n<pre is:raw="" class="astro-code github-dark" style="background-color: #24292e; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color: #E1E4E8">leaf.</span><span style="color: #B392F0">join</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">veins</span><span style="color: #E1E4E8">());</span></span></code></pre>\n<img width="370" alt="Screen Shot 2023-07-03 at 2 28 37 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/cfed6d56-3b16-4ecc-9daf-bc7c33045ba8">\n<p>If we add back in the randomness term <code>randInRange(-4, 4)</code> to the angle of the line we can start to make a more natural image.</p>\n<img width="344" alt="Screen Shot 2023-07-03 at 2 30 53 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/2a5b649d-e8ed-47f8-afae-8a3ff9e7dc12">\n<p>Now let’s bend the lines with our warping function again.</p>\n<pre is:raw="" class="astro-code github-dark" style="background-color: #24292e; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color: #6A737D">// try removing the y scaling and see what happens</span></span>\n<span class="line"><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">warper</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">bezierEasing</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">, [</span><span style="color: #79B8FF">0.28</span><span style="color: #E1E4E8">, y </span><span style="color: #F97583">/</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">4</span><span style="color: #E1E4E8">], [</span><span style="color: #79B8FF">0.58</span><span style="color: #E1E4E8">, y </span><span style="color: #F97583">/</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">8</span><span style="color: #E1E4E8">], </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #E1E4E8">line</span></span>\n<span class="line"><span style="color: #E1E4E8">  .</span><span style="color: #B392F0">forward</span><span style="color: #E1E4E8">(r)</span></span>\n<span class="line"><span style="color: #E1E4E8">  .</span><span style="color: #B392F0">resample</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">0.01</span><span style="color: #E1E4E8">) </span><span style="color: #6A737D">// we resample so there are points to warp, see what happens when this is removed</span></span>\n<span class="line"><span style="color: #E1E4E8">  .</span><span style="color: #B392F0">warp</span><span style="color: #E1E4E8">(warper);</span></span></code></pre>\n<img width="363" alt="Screen Shot 2023-07-03 at 2 32 08 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/03698576-c5ec-4aaf-9168-7bcaa90274bf">\n<p>Let’s randomly trim each vein with every fifth being a bite longer.</p>\n<pre is:raw="" class="astro-code github-dark" style="background-color: #24292e; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color: #6A737D">// the ternary makes evey fifth line trimmed up to 0.7 to 0.9 and all the others between 0.1 and 0.7</span></span>\n<span class="line"><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">trimTo</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> (i </span><span style="color: #F97583">%</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">5</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">===</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">)</span></span>\n<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #F97583">?</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">randInRange</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">0.7</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0.9</span><span style="color: #E1E4E8">)</span></span>\n<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #F97583">:</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">randInRange</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">0.1</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0.7</span><span style="color: #E1E4E8">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #F97583">if</span><span style="color: #E1E4E8"> (r </span><span style="color: #F97583">&#x3C;</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0.01</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">continue</span><span style="color: #E1E4E8">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">warper</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">bezierEasing</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">, [</span><span style="color: #79B8FF">0.28</span><span style="color: #E1E4E8">, y</span><span style="color: #F97583">/</span><span style="color: #79B8FF">4</span><span style="color: #E1E4E8">], [</span><span style="color: #79B8FF">0.58</span><span style="color: #E1E4E8">, y</span><span style="color: #F97583">/</span><span style="color: #79B8FF">8</span><span style="color: #E1E4E8">], </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #E1E4E8">line</span></span>\n<span class="line"><span style="color: #E1E4E8">  .</span><span style="color: #B392F0">forward</span><span style="color: #E1E4E8">(r)</span></span>\n<span class="line"><span style="color: #E1E4E8">  .</span><span style="color: #B392F0">resample</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">0.01</span><span style="color: #E1E4E8">)</span></span>\n<span class="line"><span style="color: #E1E4E8">  .</span><span style="color: #B392F0">warp</span><span style="color: #E1E4E8">(warper)</span></span>\n<span class="line"><span style="color: #E1E4E8">  .</span><span style="color: #B392F0">trim</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">, trimTo);</span></span></code></pre>\n<img width="350" alt="Screen Shot 2023-07-03 at 2 33 06 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/46cfb081-9b3c-4e1f-bca6-336be48e1828">\n<p>And let’s randomly break up these lines.</p>\n<pre is:raw="" class="astro-code github-dark" style="background-color: #24292e; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color: #E1E4E8">line.</span><span style="color: #B392F0">iteratePath</span><span style="color: #E1E4E8">((</span><span style="color: #FFAB70">pt</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">=></span><span style="color: #E1E4E8"> {</span></span>\n<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> Math.</span><span style="color: #B392F0">random</span><span style="color: #E1E4E8">() </span><span style="color: #F97583">&#x3C;</span><span style="color: #E1E4E8"> (i </span><span style="color: #F97583">%</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">5</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">===</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">?</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">+</span><span style="color: #79B8FF">0.17</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">:</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0.56</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">?</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">"BREAK"</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">:</span><span style="color: #E1E4E8"> pt;</span></span>\n<span class="line"><span style="color: #E1E4E8">});</span></span></code></pre>\n<img width="346" alt="Screen Shot 2023-07-03 at 2 33 49 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/98c82e8e-aa3c-4d5a-a24e-74d13cd5d4a6">\n<p>Then call veins again and flip it over for the bottom side.</p>\n<pre is:raw="" class="astro-code github-dark" style="background-color: #24292e; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color: #E1E4E8">leaf.</span><span style="color: #B392F0">join</span><span style="color: #E1E4E8">(</span><span style="color: #B392F0">veins</span><span style="color: #E1E4E8">().</span><span style="color: #B392F0">scale</span><span style="color: #E1E4E8">([</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">, </span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">], [</span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">]));</span></span></code></pre>\n<img width="352" alt="Screen Shot 2023-07-03 at 2 34 39 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/b7a4bf33-5598-4ee3-9787-6b57de6cdae4">\n<h2 id="the-stem">The Stem</h2>\n<p>The stem is the easiest part.</p>\n<p>We just need to draw a line.</p>\n<pre is:raw="" class="astro-code github-dark" style="background-color: #24292e; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">lineStem</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">createTurtle</span><span style="color: #E1E4E8">([</span><span style="color: #F97583">-</span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">])</span></span>\n<span class="line"><span style="color: #E1E4E8">  .</span><span style="color: #B392F0">forward</span><span style="color: #E1E4E8">(leafLength </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">)</span></span>\n<span class="line"><span style="color: #E1E4E8">  .</span><span style="color: #B392F0">resample</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">0.1</span><span style="color: #E1E4E8">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color: #E1E4E8">leaf.</span><span style="color: #B392F0">join</span><span style="color: #E1E4E8">(lineStem);</span></span></code></pre>\n<img width="426" alt="Screen Shot 2023-07-03 at 2 35 26 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/7cf0afbc-af28-439b-a672-17e60080b8bb">\n<h2 id="finishing-up">Finishing Up</h2>\n<p>To Finish our leaf let’s go through all the points and add a little noise and a bend upwards.</p>\n<pre is:raw="" class="astro-code github-dark" style="background-color: #24292e; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color: #E1E4E8">leaf.</span><span style="color: #B392F0">iteratePath</span><span style="color: #E1E4E8">((</span><span style="color: #FFAB70">pt</span><span style="color: #E1E4E8">) </span><span style="color: #F97583">=></span><span style="color: #E1E4E8"> {</span></span>\n<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #F97583">let</span><span style="color: #E1E4E8"> [x, y] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> pt;</span></span>\n<span class="line"><span style="color: #E1E4E8">  y </span><span style="color: #F97583">+=</span><span style="color: #E1E4E8"> x </span><span style="color: #F97583">*</span><span style="color: #E1E4E8"> x </span><span style="color: #F97583">*</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0.02</span><span style="color: #E1E4E8">;</span></span>\n<span class="line"><span style="color: #E1E4E8">  y </span><span style="color: #F97583">+=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">noise</span><span style="color: #E1E4E8">([x </span><span style="color: #F97583">*</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0.2</span><span style="color: #E1E4E8">]) </span><span style="color: #F97583">*</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0.3</span><span style="color: #E1E4E8">;</span></span>\n<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> [x, y];</span></span>\n<span class="line"><span style="color: #E1E4E8">});</span></span></code></pre>\n<p>And now we have a leaf!</p>\n<img width="416" alt="Screen Shot 2023-07-03 at 2 37 02 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/ced13771-b8e6-4eb0-a035-5528c9e38cde">\n<h2 id="acknowledgements">Acknowledgements</h2>\n<p>Thanks to <a href="https://github.com/LingDong-">Lingdong</a> for drawing the first draft of the leaf with me.</p>');
const frontmatter = { "title": "How to draw a leaf", "description": "Let's learn how to draw a leaf that looks likes this.", "thumbnail": "https://github.com/hackclub/haxidraw/assets/27078897/9ce96217-bc5e-49cc-87b2-178681188eb3" };
const file = "/Users/jchen/Documents/Programming/prs/haxidraw/astro/src/content/workshops/leaf.md";
const url = void 0;
function rawContent() {
  return '\n# How to draw a leaf\n\n> You can follow along in this editor: https://editor.haxidraw.hackclub.com/\n\n---\n\nLet\'s learn how to draw a leaf that looks likes this.\n\n<img width="389" alt="Screen Shot 2023-07-03 at 2 14 10 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/9ce96217-bc5e-49cc-87b2-178681188eb3">\n\nLet\'s break it down into parts.\n\n## Outline\n\nWe\'ll start with the outline of the leaf.\n\n<img width="382" alt="Screen Shot 2023-07-03 at 2 16 33 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/7027b27a-cc5f-4565-9357-2c8fd1b21e6f">\n\nFirst let\'s lay down a line which will become the top edge.\n\n```js\nconst leafLength = 5;\nconst leafW = 1.3;\n\nconst edge = createTurtle().forward(leafLength);\n\n// render the final leaf like such\nconst leaf = createTurtle().join(edge);\n\ndrawTurtles(leaf);\n```\n\n<img width="366" alt="Screen Shot 2023-07-03 at 2 17 32 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/aa904051-d23a-4542-9da9-025cd658fc28">\n\nNow we can warp the line by resampling points and then using `warp` with a bezier curve.\n\n```js\nconst edge = createTurtle()\n  .forward(leafLength)\n  .resample(0.01) // we resample to have points to bend\n  .warp(bezierEasing(0, [0.4, 2.58], [0.52, 0.31], 0)); // bezierEasing takes a start y, control point, control point, end y\n```\n\n<img width="374" alt="Screen Shot 2023-07-03 at 2 19 18 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/1ed396a9-41bd-42d6-bd60-95dd8eea3719">\n\nLet\'s make the bottom edge too.\n\n```js\nconst bottom = edge.copy().scale([1, -1], [0, 0]);\n\nconst leaf = createTurtle().join(edge).join(bottom);\n\ndrawTurtles(leaf);\n```\n\n<img width="378" alt="Screen Shot 2023-07-03 at 2 22 51 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/88b1ccfb-0811-49bf-80f5-ce3cf7c93609">\n\nNow we can add some noise to make the leaf look a bit more organic.\n\n```js\nedge.warp(\n  (t) => noise(t * 20.4, { octaves: 2 }) * 0.09 * (t === 0 || t === 1 ? 0 : 1)\n);\nbottom.warp(\n  (t) => noise(t * 23.6, { octaves: 2 }) * -0.1 * (t === 0 || t === 1 ? 0 : 1)\n);\n```\n\nThis term `(t===0 || t === 1 ? 0 : 1)` makes sure that the endpoints stay the same on the curve.\nTry playing with the multiplication terms.\n\n<img width="358" alt="Screen Shot 2023-07-03 at 2 23 45 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/d547cd78-ec67-4fbe-8c72-78363c611946">\n\nNow we have an outline let\'s do the veins of the leaf.\n\n## Veins\n\nAfter adding the veins our leaf will look like this.\n\n<img width="347" alt="Screen Shot 2023-07-03 at 2 25 44 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/ad810112-ca58-48f4-8961-311cb7d44ec7">\n\nWe\'ll start with the top side by drawing some lines the follow the distribution of the edge.\nLet\'s make a veins function which will return some lines we can add to our main drawing.\n\n```js\nfunction veins() {\n  const lines = createTurtle();\n\n  let littleLinesMax = 61;\n  for (let i = 4; i < littleLinesMax - 5; i++) {\n    const t = i / (littleLinesMax - 1); // this line to get t values 0 to 1 while iterating is very common\n    const x0 = t * leafLength;\n    const y0 = 0;\n\n    // try playing with the `0.1` term\n    // interpolate returns a point and we take `[1]` to get the y value\n    y = edge.interpolate(t + 0.1)[1];\n\n    const line = createTurtle([x0, y0]);\n\n    line.right(-70 + t * 37 + randInRange(-4, 4));\n\n    let r = y * 0.7;\n\n    if (r < 0.01) continue;\n\n    line.forward(r);\n\n    lines.join(line);\n  }\n\n  return lines;\n}\n```\n\nWhich we add to the drawing like such.\n\n```js\nleaf.join(veins());\n```\n\n<img width="370" alt="Screen Shot 2023-07-03 at 2 28 37 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/cfed6d56-3b16-4ecc-9daf-bc7c33045ba8">\n\nIf we add back in the randomness term `randInRange(-4, 4)` to the angle of the line we can start to make a more natural image.\n\n<img width="344" alt="Screen Shot 2023-07-03 at 2 30 53 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/2a5b649d-e8ed-47f8-afae-8a3ff9e7dc12">\n\nNow let\'s bend the lines with our warping function again.\n\n```js\n// try removing the y scaling and see what happens\nconst warper = bezierEasing(0, [0.28, y / 4], [0.58, y / 8], 0);\n\nline\n  .forward(r)\n  .resample(0.01) // we resample so there are points to warp, see what happens when this is removed\n  .warp(warper);\n```\n\n<img width="363" alt="Screen Shot 2023-07-03 at 2 32 08 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/03698576-c5ec-4aaf-9168-7bcaa90274bf">\n\nLet\'s randomly trim each vein with every fifth being a bite longer.\n\n```js\n// the ternary makes evey fifth line trimmed up to 0.7 to 0.9 and all the others between 0.1 and 0.7\nconst trimTo = (i % 5 === 0)\n  ? randInRange(0.7, 0.9)\n  : randInRange(0.1, 0.7);\n\nif (r < 0.01) continue;\n\nconst warper = bezierEasing(0, [0.28, y/4], [0.58, y/8], 0);\n\nline\n  .forward(r)\n  .resample(0.01)\n  .warp(warper)\n  .trim(0, trimTo);\n```\n\n<img width="350" alt="Screen Shot 2023-07-03 at 2 33 06 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/46cfb081-9b3c-4e1f-bca6-336be48e1828">\n\nAnd let\'s randomly break up these lines.\n\n```js\nline.iteratePath((pt) => {\n  return Math.random() < (i % 5 === 0 ? +0.17 : 0.56) ? "BREAK" : pt;\n});\n```\n\n<img width="346" alt="Screen Shot 2023-07-03 at 2 33 49 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/98c82e8e-aa3c-4d5a-a24e-74d13cd5d4a6">\n\nThen call veins again and flip it over for the bottom side.\n\n```js\nleaf.join(veins().scale([1, -1], [0, 0]));\n```\n\n<img width="352" alt="Screen Shot 2023-07-03 at 2 34 39 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/b7a4bf33-5598-4ee3-9787-6b57de6cdae4">\n\n## The Stem\n\nThe stem is the easiest part.\n\nWe just need to draw a line.\n\n```js\nconst lineStem = createTurtle([-1, 0])\n  .forward(leafLength + 1)\n  .resample(0.1);\n\nleaf.join(lineStem);\n```\n\n<img width="426" alt="Screen Shot 2023-07-03 at 2 35 26 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/7cf0afbc-af28-439b-a672-17e60080b8bb">\n\n## Finishing Up\n\nTo Finish our leaf let\'s go through all the points and add a little noise and a bend upwards.\n\n```js\nleaf.iteratePath((pt) => {\n  let [x, y] = pt;\n  y += x * x * 0.02;\n  y += noise([x * 0.2]) * 0.3;\n  return [x, y];\n});\n```\n\nAnd now we have a leaf!\n\n<img width="416" alt="Screen Shot 2023-07-03 at 2 37 02 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/ced13771-b8e6-4eb0-a035-5528c9e38cde">\n\n## Acknowledgements\n\nThanks to [Lingdong](https://github.com/LingDong-) for drawing the first draft of the leaf with me.\n';
}
function compiledContent() {
  return html;
}
function getHeadings() {
  return [{ "depth": 1, "slug": "how-to-draw-a-leaf", "text": "How to draw a leaf" }, { "depth": 2, "slug": "outline", "text": "Outline" }, { "depth": 2, "slug": "veins", "text": "Veins" }, { "depth": 2, "slug": "the-stem", "text": "The Stem" }, { "depth": 2, "slug": "finishing-up", "text": "Finishing Up" }, { "depth": 2, "slug": "acknowledgements", "text": "Acknowledgements" }];
}
async function Content() {
  const { layout, ...content } = frontmatter;
  content.file = file;
  content.url = url;
  const contentFragment = createVNode(Fragment, { "set:html": html });
  return contentFragment;
}
Content[Symbol.for("astro.needsHeadRendering")] = true;
export {
  Content,
  compiledContent,
  Content as default,
  file,
  frontmatter,
  getHeadings,
  images,
  rawContent,
  url
};
