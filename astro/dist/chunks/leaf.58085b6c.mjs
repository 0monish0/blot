import { i as createVNode, s as spreadAttributes, F as Fragment } from "./astro.2c740cbe.mjs";
import "html-escaper";
import "cookie";
import "kleur/colors";
import "path-to-regexp";
import "mime";
import "string-width";
const images = {};
function updateImageReferences(html2) {
  return html2.replaceAll(
    /__ASTRO_IMAGE_="([^"]+)"/gm,
    (full, imagePath) => spreadAttributes({ src: images[imagePath].src, ...images[imagePath].attributes })
  );
}
const html = updateImageReferences('<blockquote>\n<p>You can follow along in this editor: <a href="https://editor.haxidraw.hackclub.com/">https://editor.haxidraw.hackclub.com/</a></p>\n</blockquote>\n<hr>\n<p>Let’s learn how to draw a leaf that looks likes this.</p>\n<p><img width="389" alt="Screen Shot 2023-07-03 at 2 14 10 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/9ce96217-bc5e-49cc-87b2-178681188eb3"></p>\n<p>Let’s break it down into parts.</p>\n<h2 id="outline">Outline</h2>\n<p>We’ll start with the outline of the leaf.</p>\n<p><img width="382" alt="Screen Shot 2023-07-03 at 2 16 33 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/7027b27a-cc5f-4565-9357-2c8fd1b21e6f"></p>\n<p>First let’s lay down a line which will become the top edge.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">const</span> leafLength <span class="token operator">=</span> <span class="token number">5</span>\n<span class="token keyword">const</span> leafW <span class="token operator">=</span> <span class="token number">1.3</span>\n\n<span class="token keyword">const</span> edge <span class="token operator">=</span> <span class="token function">createTurtle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>leafLength<span class="token punctuation">)</span>\n\n<span class="token comment">// render the final leaf like such</span>\n<span class="token keyword">const</span> leaf <span class="token operator">=</span> <span class="token function">createTurtle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span>\n\n<span class="token function">drawTurtles</span><span class="token punctuation">(</span>leaf<span class="token punctuation">)</span></code></pre>\n<p><img width="366" alt="Screen Shot 2023-07-03 at 2 17 32 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/aa904051-d23a-4542-9da9-025cd658fc28"></p>\n<p>Now we can warp the line by resampling points and then using <code>warp</code> with a bezier curve.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">const</span> edge <span class="token operator">=</span> <span class="token function">createTurtle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>leafLength<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">resample</span><span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span> <span class="token comment">// we resample to have points to bend</span>\n  <span class="token punctuation">.</span><span class="token function">warp</span><span class="token punctuation">(</span><span class="token function">bezierEasing</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token number">2.58</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.52</span><span class="token punctuation">,</span> <span class="token number">0.31</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// bezierEasing takes a start y, control point, control point, end y</span></code></pre>\n<p><img width="374" alt="Screen Shot 2023-07-03 at 2 19 18 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/1ed396a9-41bd-42d6-bd60-95dd8eea3719"></p>\n<p>Let’s make the bottom edge too.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">const</span> bottom <span class="token operator">=</span> edge<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> leaf <span class="token operator">=</span> <span class="token function">createTurtle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>bottom<span class="token punctuation">)</span>\n\n<span class="token function">drawTurtles</span><span class="token punctuation">(</span>leaf<span class="token punctuation">)</span></code></pre>\n<p><img width="378" alt="Screen Shot 2023-07-03 at 2 22 51 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/88b1ccfb-0811-49bf-80f5-ce3cf7c93609"></p>\n<p>Now we can add some noise to make the leaf look a bit more organic.</p>\n<pre class="language-js"><code is:raw="" class="language-js">edge<span class="token punctuation">.</span><span class="token function">warp</span><span class="token punctuation">(</span>\n  <span class="token parameter">t</span> <span class="token operator">=></span> <span class="token function">noise</span><span class="token punctuation">(</span>t <span class="token operator">*</span> <span class="token number">20.4</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">octaves</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.09</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> t <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\nbottom<span class="token punctuation">.</span><span class="token function">warp</span><span class="token punctuation">(</span>\n  <span class="token parameter">t</span> <span class="token operator">=></span> <span class="token function">noise</span><span class="token punctuation">(</span>t <span class="token operator">*</span> <span class="token number">23.6</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">octaves</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> t <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span></code></pre>\n<p>This term <code>(t===0 || t === 1 ? 0 : 1)</code> makes sure that the endpoints stay the same on the curve.\nTry playing with the multiplication terms.</p>\n<p><img width="358" alt="Screen Shot 2023-07-03 at 2 23 45 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/d547cd78-ec67-4fbe-8c72-78363c611946"></p>\n<p>Now we have an outline let’s do the veins of the leaf.</p>\n<h2 id="veins">Veins</h2>\n<p>After adding the veins our leaf will look like this.</p>\n<p><img width="347" alt="Screen Shot 2023-07-03 at 2 25 44 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/ad810112-ca58-48f4-8961-311cb7d44ec7"></p>\n<p>We’ll start with the top side by drawing some lines the follow the distribution of the edge.\nLet’s make a veins function which will return some lines we can add to our main drawing.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">function</span> <span class="token function">veins</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> lines <span class="token operator">=</span> <span class="token function">createTurtle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">let</span> littleLinesMax <span class="token operator">=</span> <span class="token number">61</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> littleLinesMax <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> t <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token punctuation">(</span>littleLinesMax <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// this line to get t values 0 to 1 while iterating is very common</span>\n    <span class="token keyword">const</span> x0 <span class="token operator">=</span> t <span class="token operator">*</span> leafLength\n    <span class="token keyword">const</span> y0 <span class="token operator">=</span> <span class="token number">0</span>\n\n    <span class="token comment">// try playing with the `0.1` term</span>\n    <span class="token comment">// interpolate returns a point and we take `[1]` to get the y value</span>\n    y <span class="token operator">=</span> edge<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n\n    <span class="token keyword">const</span> line <span class="token operator">=</span> <span class="token function">createTurtle</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n    line<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">70</span> <span class="token operator">+</span> t <span class="token operator">*</span> <span class="token number">37</span> <span class="token operator">+</span> <span class="token function">randInRange</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">let</span> r <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">0.7</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&#x3C;</span> <span class="token number">0.01</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>\n\n    line<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>\n\n    lines<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> lines\n<span class="token punctuation">}</span></code></pre>\n<p>Which we add to the drawing like such.</p>\n<pre class="language-js"><code is:raw="" class="language-js">leaf<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token function">veins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>\n<p><img width="370" alt="Screen Shot 2023-07-03 at 2 28 37 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/cfed6d56-3b16-4ecc-9daf-bc7c33045ba8"></p>\n<p>If we add back in the randomness term <code>randInRange(-4, 4)</code> to the angle of the line we can start to make a more natural image.</p>\n<p><img width="344" alt="Screen Shot 2023-07-03 at 2 30 53 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/2a5b649d-e8ed-47f8-afae-8a3ff9e7dc12"></p>\n<p>Now let’s bend the lines with our warping function again.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token comment">// try removing the y scaling and see what happens</span>\n<span class="token keyword">const</span> warper <span class="token operator">=</span> <span class="token function">bezierEasing</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.28</span><span class="token punctuation">,</span> y <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.58</span><span class="token punctuation">,</span> y <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n\nline\n  <span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">resample</span><span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span> <span class="token comment">// we resample so there are points to warp, see what happens when this is removed</span>\n  <span class="token punctuation">.</span><span class="token function">warp</span><span class="token punctuation">(</span>warper<span class="token punctuation">)</span></code></pre>\n<p><img width="363" alt="Screen Shot 2023-07-03 at 2 32 08 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/03698576-c5ec-4aaf-9168-7bcaa90274bf"></p>\n<p>Let’s randomly trim each vein with every fifth being a bite longer.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token comment">// the ternary makes evey fifth line trimmed up to 0.7 to 0.9 and all the others between 0.1 and 0.7</span>\n<span class="token keyword">const</span> trimTo <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token operator">?</span> <span class="token function">randInRange</span><span class="token punctuation">(</span><span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span>\n  <span class="token operator">:</span> <span class="token function">randInRange</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&#x3C;</span> <span class="token number">0.01</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> warper <span class="token operator">=</span> <span class="token function">bezierEasing</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.28</span><span class="token punctuation">,</span> y<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.58</span><span class="token punctuation">,</span> y<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nline\n  <span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">resample</span><span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">warp</span><span class="token punctuation">(</span>warper<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> trimTo<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><img width="350" alt="Screen Shot 2023-07-03 at 2 33 06 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/46cfb081-9b3c-4e1f-bca6-336be48e1828"></p>\n<p>And let’s randomly break up these lines.</p>\n<pre class="language-js"><code is:raw="" class="language-js">line<span class="token punctuation">.</span><span class="token function">iteratePath</span><span class="token punctuation">(</span><span class="token parameter">pt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&#x3C;</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">+</span><span class="token number">0.17</span> <span class="token operator">:</span> <span class="token number">0.56</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">\'BREAK\'</span> <span class="token operator">:</span> pt\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n<p><img width="346" alt="Screen Shot 2023-07-03 at 2 33 49 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/98c82e8e-aa3c-4d5a-a24e-74d13cd5d4a6"></p>\n<p>Then call veins again and flip it over for the bottom side.</p>\n<pre class="language-js"><code is:raw="" class="language-js">leaf<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token function">veins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>\n<p><img width="352" alt="Screen Shot 2023-07-03 at 2 34 39 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/b7a4bf33-5598-4ee3-9787-6b57de6cdae4"></p>\n<h2 id="the-stem">The Stem</h2>\n<p>The stem is the easiest part.</p>\n<p>We just need to draw a line.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">const</span> lineStem <span class="token operator">=</span> <span class="token function">createTurtle</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>leafLength <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">resample</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>\n\nleaf<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>lineStem<span class="token punctuation">)</span></code></pre>\n<p><img width="426" alt="Screen Shot 2023-07-03 at 2 35 26 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/7cf0afbc-af28-439b-a672-17e60080b8bb"></p>\n<h2 id="finishing-up">Finishing Up</h2>\n<p>To Finish our leaf let’s go through all the points and add a little noise and a bend upwards.</p>\n<pre class="language-js"><code is:raw="" class="language-js">leaf<span class="token punctuation">.</span><span class="token function">iteratePath</span><span class="token punctuation">(</span><span class="token parameter">pt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> pt\n  y <span class="token operator">+=</span> x <span class="token operator">*</span> x <span class="token operator">*</span> <span class="token number">0.02</span>\n  y <span class="token operator">+=</span> <span class="token function">noise</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x <span class="token operator">*</span> <span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.3</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n<p>And now we have a leaf!</p>\n<p><img width="416" alt="Screen Shot 2023-07-03 at 2 37 02 PM" src="https://github.com/hackclub/haxidraw/assets/27078897/ced13771-b8e6-4eb0-a035-5528c9e38cde"></p>\n<h2 id="acknowledgements">Acknowledgements</h2>\n<p>Thanks to <a href="https://github.com/LingDong-">Lingdong</a> for drawing the first draft of the leaf with me.</p>');
const frontmatter = { "title": "How to draw a leaf", "thumbnail": "https://github.com/hackclub/haxidraw/assets/27078897/9ce96217-bc5e-49cc-87b2-178681188eb3", "contributors": "henrybass" };
const file = "/Users/jchen/Documents/Programming/haxidraw/new/guides/leaf.md";
const url = void 0;
function rawContent() {
  return '\n> You can follow along in this editor: https://editor.haxidraw.hackclub.com/\n\n---\n\nLet\'s learn how to draw a leaf that looks likes this.\n\n<img\n  width="389"\n  alt="Screen Shot 2023-07-03 at 2 14 10 PM"\n  src="https://github.com/hackclub/haxidraw/assets/27078897/9ce96217-bc5e-49cc-87b2-178681188eb3"\n/>\n\nLet\'s break it down into parts.\n\n## Outline\n\nWe\'ll start with the outline of the leaf.\n\n<img\n  width="382"\n  alt="Screen Shot 2023-07-03 at 2 16 33 PM"\n  src="https://github.com/hackclub/haxidraw/assets/27078897/7027b27a-cc5f-4565-9357-2c8fd1b21e6f"\n/>\n\nFirst let\'s lay down a line which will become the top edge.\n\n```js\nconst leafLength = 5\nconst leafW = 1.3\n\nconst edge = createTurtle().forward(leafLength)\n\n// render the final leaf like such\nconst leaf = createTurtle().join(edge)\n\ndrawTurtles(leaf)\n```\n\n<img\n  width="366"\n  alt="Screen Shot 2023-07-03 at 2 17 32 PM"\n  src="https://github.com/hackclub/haxidraw/assets/27078897/aa904051-d23a-4542-9da9-025cd658fc28"\n/>\n\nNow we can warp the line by resampling points and then using `warp` with a bezier curve.\n\n```js\nconst edge = createTurtle()\n  .forward(leafLength)\n  .resample(0.01) // we resample to have points to bend\n  .warp(bezierEasing(0, [0.4, 2.58], [0.52, 0.31], 0)) // bezierEasing takes a start y, control point, control point, end y\n```\n\n<img\n  width="374"\n  alt="Screen Shot 2023-07-03 at 2 19 18 PM"\n  src="https://github.com/hackclub/haxidraw/assets/27078897/1ed396a9-41bd-42d6-bd60-95dd8eea3719"\n/>\n\nLet\'s make the bottom edge too.\n\n```js\nconst bottom = edge.copy().scale([1, -1], [0, 0])\n\nconst leaf = createTurtle().join(edge).join(bottom)\n\ndrawTurtles(leaf)\n```\n\n<img\n  width="378"\n  alt="Screen Shot 2023-07-03 at 2 22 51 PM"\n  src="https://github.com/hackclub/haxidraw/assets/27078897/88b1ccfb-0811-49bf-80f5-ce3cf7c93609"\n/>\n\nNow we can add some noise to make the leaf look a bit more organic.\n\n```js\nedge.warp(\n  t => noise(t * 20.4, { octaves: 2 }) * 0.09 * (t === 0 || t === 1 ? 0 : 1)\n)\nbottom.warp(\n  t => noise(t * 23.6, { octaves: 2 }) * -0.1 * (t === 0 || t === 1 ? 0 : 1)\n)\n```\n\nThis term `(t===0 || t === 1 ? 0 : 1)` makes sure that the endpoints stay the same on the curve.\nTry playing with the multiplication terms.\n\n<img\n  width="358"\n  alt="Screen Shot 2023-07-03 at 2 23 45 PM"\n  src="https://github.com/hackclub/haxidraw/assets/27078897/d547cd78-ec67-4fbe-8c72-78363c611946"\n/>\n\nNow we have an outline let\'s do the veins of the leaf.\n\n## Veins\n\nAfter adding the veins our leaf will look like this.\n\n<img\n  width="347"\n  alt="Screen Shot 2023-07-03 at 2 25 44 PM"\n  src="https://github.com/hackclub/haxidraw/assets/27078897/ad810112-ca58-48f4-8961-311cb7d44ec7"\n/>\n\nWe\'ll start with the top side by drawing some lines the follow the distribution of the edge.\nLet\'s make a veins function which will return some lines we can add to our main drawing.\n\n```js\nfunction veins() {\n  const lines = createTurtle()\n\n  let littleLinesMax = 61\n  for (let i = 4; i < littleLinesMax - 5; i++) {\n    const t = i / (littleLinesMax - 1) // this line to get t values 0 to 1 while iterating is very common\n    const x0 = t * leafLength\n    const y0 = 0\n\n    // try playing with the `0.1` term\n    // interpolate returns a point and we take `[1]` to get the y value\n    y = edge.interpolate(t + 0.1)[1]\n\n    const line = createTurtle([x0, y0])\n\n    line.right(-70 + t * 37 + randInRange(-4, 4))\n\n    let r = y * 0.7\n\n    if (r < 0.01) continue\n\n    line.forward(r)\n\n    lines.join(line)\n  }\n\n  return lines\n}\n```\n\nWhich we add to the drawing like such.\n\n```js\nleaf.join(veins())\n```\n\n<img\n  width="370"\n  alt="Screen Shot 2023-07-03 at 2 28 37 PM"\n  src="https://github.com/hackclub/haxidraw/assets/27078897/cfed6d56-3b16-4ecc-9daf-bc7c33045ba8"\n/>\n\nIf we add back in the randomness term `randInRange(-4, 4)` to the angle of the line we can start to make a more natural image.\n\n<img\n  width="344"\n  alt="Screen Shot 2023-07-03 at 2 30 53 PM"\n  src="https://github.com/hackclub/haxidraw/assets/27078897/2a5b649d-e8ed-47f8-afae-8a3ff9e7dc12"\n/>\n\nNow let\'s bend the lines with our warping function again.\n\n```js\n// try removing the y scaling and see what happens\nconst warper = bezierEasing(0, [0.28, y / 4], [0.58, y / 8], 0)\n\nline\n  .forward(r)\n  .resample(0.01) // we resample so there are points to warp, see what happens when this is removed\n  .warp(warper)\n```\n\n<img\n  width="363"\n  alt="Screen Shot 2023-07-03 at 2 32 08 PM"\n  src="https://github.com/hackclub/haxidraw/assets/27078897/03698576-c5ec-4aaf-9168-7bcaa90274bf"\n/>\n\nLet\'s randomly trim each vein with every fifth being a bite longer.\n\n```js\n// the ternary makes evey fifth line trimmed up to 0.7 to 0.9 and all the others between 0.1 and 0.7\nconst trimTo = (i % 5 === 0)\n  ? randInRange(0.7, 0.9)\n  : randInRange(0.1, 0.7);\n\nif (r < 0.01) continue;\n\nconst warper = bezierEasing(0, [0.28, y/4], [0.58, y/8], 0);\n\nline\n  .forward(r)\n  .resample(0.01)\n  .warp(warper)\n  .trim(0, trimTo);\n```\n\n<img\n  width="350"\n  alt="Screen Shot 2023-07-03 at 2 33 06 PM"\n  src="https://github.com/hackclub/haxidraw/assets/27078897/46cfb081-9b3c-4e1f-bca6-336be48e1828"\n/>\n\nAnd let\'s randomly break up these lines.\n\n```js\nline.iteratePath(pt => {\n  return Math.random() < (i % 5 === 0 ? +0.17 : 0.56) ? \'BREAK\' : pt\n})\n```\n\n<img\n  width="346"\n  alt="Screen Shot 2023-07-03 at 2 33 49 PM"\n  src="https://github.com/hackclub/haxidraw/assets/27078897/98c82e8e-aa3c-4d5a-a24e-74d13cd5d4a6"\n/>\n\nThen call veins again and flip it over for the bottom side.\n\n```js\nleaf.join(veins().scale([1, -1], [0, 0]))\n```\n\n<img\n  width="352"\n  alt="Screen Shot 2023-07-03 at 2 34 39 PM"\n  src="https://github.com/hackclub/haxidraw/assets/27078897/b7a4bf33-5598-4ee3-9787-6b57de6cdae4"\n/>\n\n## The Stem\n\nThe stem is the easiest part.\n\nWe just need to draw a line.\n\n```js\nconst lineStem = createTurtle([-1, 0])\n  .forward(leafLength + 1)\n  .resample(0.1)\n\nleaf.join(lineStem)\n```\n\n<img\n  width="426"\n  alt="Screen Shot 2023-07-03 at 2 35 26 PM"\n  src="https://github.com/hackclub/haxidraw/assets/27078897/7cf0afbc-af28-439b-a672-17e60080b8bb"\n/>\n\n## Finishing Up\n\nTo Finish our leaf let\'s go through all the points and add a little noise and a bend upwards.\n\n```js\nleaf.iteratePath(pt => {\n  let [x, y] = pt\n  y += x * x * 0.02\n  y += noise([x * 0.2]) * 0.3\n  return [x, y]\n})\n```\n\nAnd now we have a leaf!\n\n<img\n  width="416"\n  alt="Screen Shot 2023-07-03 at 2 37 02 PM"\n  src="https://github.com/hackclub/haxidraw/assets/27078897/ced13771-b8e6-4eb0-a035-5528c9e38cde"\n/>\n\n## Acknowledgements\n\nThanks to [Lingdong](https://github.com/LingDong-) for drawing the first draft of the leaf with me.\n';
}
function compiledContent() {
  return html;
}
function getHeadings() {
  return [{ "depth": 2, "slug": "outline", "text": "Outline" }, { "depth": 2, "slug": "veins", "text": "Veins" }, { "depth": 2, "slug": "the-stem", "text": "The Stem" }, { "depth": 2, "slug": "finishing-up", "text": "Finishing Up" }, { "depth": 2, "slug": "acknowledgements", "text": "Acknowledgements" }];
}
async function Content() {
  const { layout, ...content } = frontmatter;
  content.file = file;
  content.url = url;
  const contentFragment = createVNode(Fragment, { "set:html": html });
  return contentFragment;
}
Content[Symbol.for("astro.needsHeadRendering")] = true;
export {
  Content,
  compiledContent,
  Content as default,
  file,
  frontmatter,
  getHeadings,
  images,
  rawContent,
  url
};
