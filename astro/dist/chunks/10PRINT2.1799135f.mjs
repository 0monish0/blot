import { i as createVNode, s as spreadAttributes, F as Fragment } from "./astro.2c740cbe.mjs";
import "html-escaper";
import "cookie";
import "kleur/colors";
import "path-to-regexp";
import "mime";
import "string-width";
const images = {};
function updateImageReferences(html2) {
  return html2.replaceAll(
    /__ASTRO_IMAGE_="([^"]+)"/gm,
    (full, imagePath) => spreadAttributes({ src: images[imagePath].src, ...images[imagePath].attributes })
  );
}
const html = updateImageReferences('<p><em>This tutorial is aimed at beginners, but it works best if you have a little prior programming experience.</em></p>\n<p>“10PRINT” is one of the oldest and most well-known examples of generative art. It was originally created for the Commodore 64 in BASIC, and the code looked like this:</p>\n<pre class="language-basic"><code is:raw="" class="language-basic"><span class="token number">10</span> <span class="token function">PRINT</span> <span class="token function">CHR$</span><span class="token punctuation">(</span><span class="token number">205.5</span><span class="token operator">+</span><span class="token function">RND</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">:</span> <span class="token keyword">GOTO</span> <span class="token number">10</span></code></pre>\n<p>From just that one line, the following intricate pattern is be created:</p>\n<p><img src="https://elmcip.net/sites/default/files/media/work/images/the_ppg256_article_image.png" width="512px"></p>\n<p>There’s even a book named after this program: <a href="https://10print.org/">10print.org</a>! For this guide, let’s try to replicate this artwork for <strong><em>Haxidraw</em></strong>. (This tutorial works fine if you don’t have one!)</p>\n<p>A Haxidraw is a small drawing robot that can be programed from a browser. You send it instructions through code, and it follows those instructions to create a drawing. By the end of this guide, you will have created some art that can be drawn by the machine!</p>\n<p><img src="https://cloud-imp7l9zfa-hack-club-bot.vercel.app/0232548454-cfc5bbb6-f242-43a8-bbec-d573518cc505.jpg" width="512px"></p>\n<p><img src="https://cloud-gal4nsl32-hack-club-bot.vercel.app/0image.png" width="512px"></p>\n<p>Here are some examples of art people have made with Haxidraw:</p>\n<p><img src="https://github.com/hackclub/haxidraw/blob/main/art/landscape-henry/snapshots/landscape.png?raw=true" width="512px"></p>\n<p><img src="https://github.com/hackclub/haxidraw/blob/main/art/roots-kai/snapshots/roots.png?raw=true" width="512px"></p>\n<p><img src="https://github.com/hackclub/haxidraw/blob/main/art/tidal-flats-leo/snapshots/tidalFlats.png?raw=true" width="512px"></p>\n<p>The artwork seems to be a grid of slashes. Some slashes point to to the top-right, others point to the bottom-right. Overall, the distribution seems to be about 50/50. If you look closely, you might notice that the slashes are just plain text: ”/” or ”\\“. In fact, the Commodore program just prints a random sequence of characters to the screen, left to right. The challenge is, in the Haxidraw editor, you can’t write symbols directly to the screen - we’ll have to draw the slashes as lines.</p>\n<p>Let’s start by defining a constant <code>t</code>: this will represent our turtle. The turtle is basically our pen - we can send it instructions like <code>t.up()</code> or <code>t.goto([x,y])</code> to move it around. For example, calling <code>t.down()</code> places the pen on the paper, and <code>t.goto([0, 0])</code> moves the pen to the position <code>0, 0</code>.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">createTurtle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>\n<p>Directly below that, write <code>drawTurtles(t);</code>. This function makes it so that we can see the turtle’s path in the preview window as we add to it.</p>\n<p>Since the original artwork is made up of many diagonal lines, we’ll need a function that can draw these.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">function</span> <span class="token function">drawSlash</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  t<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  t<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  t<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  t<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x <span class="token operator">+</span> width<span class="token punctuation">,</span> y <span class="token operator">+</span> height<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n<p>When we call this function, you should see a small slash in a corner of the screen.</p>\n<pre class="language-plaintext"><code is:raw="" class="language-plaintext">drawSlash(0, 0, 10, 10);</code></pre>\n<p><img src="https://cloud-8v0w01f9r-hack-club-bot.vercel.app/0image.png" width="512px"></p>\n<p>We can draw more by using a <code>for</code> loop.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">drawSlash</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n<p>You’ll still only see one, because they all overlap. We can draw more by moving the slash to the right each time we loop.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token function">drawSlash</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span></code></pre>\n<p><img src="https://cloud-q034t1mck-hack-club-bot.vercel.app/0image.png" width="512px"></p>\n<p>That’s a start, but they’re too close together. We want them to be evenly spaced out in a grid.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">const</span> gridCellSize <span class="token operator">=</span> <span class="token number">12</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">drawSlash</span><span class="token punctuation">(</span>i <span class="token operator">*</span> gridCellSize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n<p><img src="https://cloud-gx75sdvws-hack-club-bot.vercel.app/0image.png" width="512px"></p>\n<p>Now, let’s do the same, but on the <code>y</code> axis.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">const</span> gridCellSize <span class="token operator">=</span> <span class="token number">12</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&#x3C;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">drawSlash</span><span class="token punctuation">(</span>i <span class="token operator">*</span> gridCellSize<span class="token punctuation">,</span> j <span class="token operator">*</span> gridCellSize<span class="token punctuation">,</span> gridCellSize<span class="token punctuation">,</span> gridCellSize<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<p><img src="https://cloud-ivwz75d5q-hack-club-bot.vercel.app/0image.png" width="512px"></p>\n<p>The lines don’t quite reach the edge of the screen, though. Try changing <code>gridCellSize</code> until it fits.</p>\n<p><img src="https://cloud-3n0g15soa-hack-club-bot.vercel.app/0image.png" width="512px"></p>\n<p>We’re getting close, but all the lines still face in the same direction. Going back to <code>drawSlash</code>, try flipping the lines we draw horizontally, making them face the other way.</p>\n<p><img src="https://cloud-7ho7ggvxw-hack-club-bot.vercel.app/0image.png" width="512px"></p>\n<p>In the original 10PRINT artwork, the lines can face in either direction randomly. By calling the <code>rand()</code> function built into Haxidraw, we can randomly swap between the two line styles.</p>\n<p>Since <code>rand()</code> returns a number between 0 and 1, 50% of the time it’s going to be over 0.5.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">function</span> <span class="token function">drawSlash</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    t<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    t<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x <span class="token operator">+</span> width<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    t<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    t<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> height<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    t<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    t<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    t<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    t<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x <span class="token operator">+</span> width<span class="token punctuation">,</span> y <span class="token operator">+</span> height<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<p>Good work!</p>\n<p><img src="https://cloud-hu9gaiddg-hack-club-bot.vercel.app/0image.png" width="512px"></p>\n<p>If we change 0.5 to something lower, we see more of one type of line than another.</p>\n<p><img src="https://cloud-bjalbh40g-hack-club-bot.vercel.app/0image.png" width="512px"></p>\n<h1 id="further-experimentation">Further experimentation</h1>\n<ul>\n<li>Try making the grid more dense, while keeping it the same size on the screen</li>\n<li>Change the line to something else</li>\n</ul>');
const frontmatter = { "title": "10PRINT2", "thumbnails": "https://elmcip.net/sites/default/files/media/work/images/the_ppg256_article_image.png", "contributors": "henrybass" };
const file = "/Users/jchen/Documents/Programming/haxidraw/new/guides/10PRINT2.md";
const url = void 0;
function rawContent() {
  return '\n_This tutorial is aimed at beginners, but it works best if you have a little prior programming experience._\n\n"10PRINT" is one of the oldest and most well-known examples of generative art. It was originally created for the Commodore 64 in BASIC, and the code looked like this:\n\n```basic\n10 PRINT CHR$(205.5+RND(1)); : GOTO 10\n```\n\nFrom just that one line, the following intricate pattern is be created:\n\n<img\n  src="https://elmcip.net/sites/default/files/media/work/images/the_ppg256_article_image.png"\n  width="512px"\n/>\n\nThere\'s even a book named after this program: [10print.org](https://10print.org/)! For this guide, let\'s try to replicate this artwork for **_Haxidraw_**. (This tutorial works fine if you don\'t have one!)\n\nA Haxidraw is a small drawing robot that can be programed from a browser. You send it instructions through code, and it follows those instructions to create a drawing. By the end of this guide, you will have created some art that can be drawn by the machine!\n\n<img\n  src="https://cloud-imp7l9zfa-hack-club-bot.vercel.app/0232548454-cfc5bbb6-f242-43a8-bbec-d573518cc505.jpg"\n  width="512px"\n/>\n\n<img\n  src="https://cloud-gal4nsl32-hack-club-bot.vercel.app/0image.png"\n  width="512px"\n/>\n\nHere are some examples of art people have made with Haxidraw:\n\n<img\n  src="https://github.com/hackclub/haxidraw/blob/main/art/landscape-henry/snapshots/landscape.png?raw=true"\n  width="512px"\n/>\n\n<img\n  src="https://github.com/hackclub/haxidraw/blob/main/art/roots-kai/snapshots/roots.png?raw=true"\n  width="512px"\n/>\n\n<img\n  src="https://github.com/hackclub/haxidraw/blob/main/art/tidal-flats-leo/snapshots/tidalFlats.png?raw=true"\n  width="512px"\n/>\n\nThe artwork seems to be a grid of slashes. Some slashes point to to the top-right, others point to the bottom-right. Overall, the distribution seems to be about 50/50. If you look closely, you might notice that the slashes are just plain text: "/" or "\\\\". In fact, the Commodore program just prints a random sequence of characters to the screen, left to right. The challenge is, in the Haxidraw editor, you can\'t write symbols directly to the screen - we\'ll have to draw the slashes as lines.\n\nLet\'s start by defining a constant `t`: this will represent our turtle. The turtle is basically our pen - we can send it instructions like `t.up()` or `t.goto([x,y])` to move it around. For example, calling `t.down()` places the pen on the paper, and `t.goto([0, 0])` moves the pen to the position `0, 0`.\n\n```js\nconst t = createTurtle()\n```\n\nDirectly below that, write `drawTurtles(t);`. This function makes it so that we can see the turtle\'s path in the preview window as we add to it.\n\nSince the original artwork is made up of many diagonal lines, we\'ll need a function that can draw these.\n\n```js\nfunction drawSlash(x, y, width, height) {\n  t.up()\n  t.goto([x, y])\n  t.down()\n  t.goto([x + width, y + height])\n}\n```\n\nWhen we call this function, you should see a small slash in a corner of the screen.\n\n```\ndrawSlash(0, 0, 10, 10);\n```\n\n<img\n  src="https://cloud-8v0w01f9r-hack-club-bot.vercel.app/0image.png"\n  width="512px"\n/>\n\nWe can draw more by using a `for` loop.\n\n```js\nfor (let i = 0; i < 10; i++) {\n  drawSlash(0, 0, 12, 12)\n}\n```\n\nYou\'ll still only see one, because they all overlap. We can draw more by moving the slash to the right each time we loop.\n\n```js\ndrawSlash(0 + i, 0, 12, 12)\n```\n\n<img\n  src="https://cloud-q034t1mck-hack-club-bot.vercel.app/0image.png"\n  width="512px"\n/>\n\nThat\'s a start, but they\'re too close together. We want them to be evenly spaced out in a grid.\n\n```js\nconst gridCellSize = 12\nfor (let i = 0; i < 10; i++) {\n  drawSlash(i * gridCellSize, 0, 12, 12)\n}\n```\n\n<img\n  src="https://cloud-gx75sdvws-hack-club-bot.vercel.app/0image.png"\n  width="512px"\n/>\n\nNow, let\'s do the same, but on the `y` axis.\n\n```js\nconst gridCellSize = 12\nfor (let i = 0; i < 10; i++) {\n  for (let j = 0; j < 10; j++) {\n    drawSlash(i * gridCellSize, j * gridCellSize, gridCellSize, gridCellSize)\n  }\n}\n```\n\n<img\n  src="https://cloud-ivwz75d5q-hack-club-bot.vercel.app/0image.png"\n  width="512px"\n/>\n\nThe lines don\'t quite reach the edge of the screen, though. Try changing `gridCellSize` until it fits.\n\n<img\n  src="https://cloud-3n0g15soa-hack-club-bot.vercel.app/0image.png"\n  width="512px"\n/>\n\nWe\'re getting close, but all the lines still face in the same direction. Going back to `drawSlash`, try flipping the lines we draw horizontally, making them face the other way.\n\n<img\n  src="https://cloud-7ho7ggvxw-hack-club-bot.vercel.app/0image.png"\n  width="512px"\n/>\n\nIn the original 10PRINT artwork, the lines can face in either direction randomly. By calling the `rand()` function built into Haxidraw, we can randomly swap between the two line styles.\n\nSince `rand()` returns a number between 0 and 1, 50% of the time it\'s going to be over 0.5.\n\n```js\nfunction drawSlash(x, y, width, height) {\n  if (rand() > 0.5) {\n    t.up()\n    t.goto([x + width, y])\n    t.down()\n    t.goto([x, y + height])\n  } else {\n    t.up()\n    t.goto([x, y])\n    t.down()\n    t.goto([x + width, y + height])\n  }\n}\n```\n\nGood work!\n\n<img\n  src="https://cloud-hu9gaiddg-hack-club-bot.vercel.app/0image.png"\n  width="512px"\n/>\n\nIf we change 0.5 to something lower, we see more of one type of line than another.\n\n<img\n  src="https://cloud-bjalbh40g-hack-club-bot.vercel.app/0image.png"\n  width="512px"\n/>\n\n# Further experimentation\n\n- Try making the grid more dense, while keeping it the same size on the screen\n- Change the line to something else\n';
}
function compiledContent() {
  return html;
}
function getHeadings() {
  return [{ "depth": 1, "slug": "further-experimentation", "text": "Further experimentation" }];
}
async function Content() {
  const { layout, ...content } = frontmatter;
  content.file = file;
  content.url = url;
  const contentFragment = createVNode(Fragment, { "set:html": html });
  return contentFragment;
}
Content[Symbol.for("astro.needsHeadRendering")] = true;
export {
  Content,
  compiledContent,
  Content as default,
  file,
  frontmatter,
  getHeadings,
  images,
  rawContent,
  url
};
