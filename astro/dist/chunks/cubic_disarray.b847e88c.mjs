import { i as createVNode, s as spreadAttributes, F as Fragment } from "./astro.2c740cbe.mjs";
import "html-escaper";
import "cookie";
import "kleur/colors";
import "path-to-regexp";
import "mime";
import "string-width";
const images = {};
function updateImageReferences(html2) {
  return html2.replaceAll(
    /__ASTRO_IMAGE_="([^"]+)"/gm,
    (full, imagePath) => spreadAttributes({ src: images[imagePath].src, ...images[imagePath].attributes })
  );
}
const html = updateImageReferences('<p><strong><em>Georg Nees</em></strong> was a pioneer of digital art, responsible for interesting works like Cubic Disarray.</p>\n<img src="https://www.seekingoutside.com/wp-content/uploads/2018/12/Screen-Shot-2018-12-11-at-3.40.46-AM-480x670.png" width="512">\n<p>Let’s try to recreate this in the Haxidraw editor. A good first step to reverse engineering any artwork is to break it down into the obvious components. There’s a grid of squares, and the squares closer to the bottom seem to be rotated more and more.</p>\n<p>We can get started by setting up a turtle, and define some constants:</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">createTurtle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">drawTurtles</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token keyword">const</span> squareSize <span class="token operator">=</span> <span class="token number">1</span></code></pre>\n<p>Obviously we’ll need a way to draw these rotated squares, so let’s define a function for that:</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> theta</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  t<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> startX <span class="token operator">=</span> x <span class="token operator">-</span> height <span class="token operator">/</span> <span class="token number">2</span>\n  <span class="token keyword">let</span> startY <span class="token operator">=</span> y <span class="token operator">-</span> height <span class="token operator">/</span> <span class="token number">2</span>\n\n  t<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token function">rotatePoints</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> startX<span class="token punctuation">,</span> startY<span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  t<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  t<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token function">rotatePoints</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> startX <span class="token operator">+</span> width<span class="token punctuation">,</span> startY<span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  t<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token function">rotatePoints</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> startX <span class="token operator">+</span> width<span class="token punctuation">,</span> startY <span class="token operator">+</span> height<span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  t<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token function">rotatePoints</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> startX<span class="token punctuation">,</span> startY <span class="token operator">+</span> height<span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  t<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token function">rotatePoints</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> startX<span class="token punctuation">,</span> startY<span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  t<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n<p>This function takes in a <code>x</code>, <code>y</code> position, along with a <code>width</code> and <code>height</code> for the square. Lastly, we’ll want a <code>theta</code> to rotate the points by. The function works by creating a square path, and rotating it around the center by a given amount. We still need to define how to do this rotation, though.</p>\n<p>This can be done using the sine and cosine functions. They decompose a given angle into an x and y component, which we can use to preform the rotation. The function takes in:</p>\n<ul>\n<li>An origin x and y to rotate around</li>\n<li>The x and y to rotate</li>\n<li>The angle to rotate by</li>\n</ul>\n<p>It then returns the rotated points as an array.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">function</span> <span class="token function">rotatePoints</span><span class="token punctuation">(</span><span class="token parameter">ox<span class="token punctuation">,</span> oy<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> dx <span class="token operator">=</span> x <span class="token operator">-</span> ox\n  <span class="token keyword">let</span> dy <span class="token operator">=</span> y <span class="token operator">-</span> oy\n  <span class="token keyword">let</span> newX <span class="token operator">=</span> dx <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span> <span class="token operator">-</span> dy <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span>\n  <span class="token keyword">let</span> newY <span class="token operator">=</span> dx <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span> <span class="token operator">+</span> dy <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>newX <span class="token operator">+</span> ox<span class="token punctuation">,</span> newY <span class="token operator">+</span> oy<span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n<p>Great, we’re almost done! Now it’s down to simply drawing the grid. Loop over every x and y in some range, and draw a square there. We rotate them by a random amount, scaled proportional to how low the square is on the screen.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&#x3C;</span> size<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&#x3C;</span> size<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">draw</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> squareSize<span class="token punctuation">,</span> squareSize<span class="token punctuation">,</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<p>And, you’re done! The final result should look something like this in the editor:</p>\n<img src="https://cloud-ot8pxbd0h-hack-club-bot.vercel.app/0image.png" width="512">');
const frontmatter = { "title": "Cubic Disarray", "thumbnail": "https://www.seekingoutside.com/wp-content/uploads/2018/12/Screen-Shot-2018-12-11-at-3.40.46-AM-480x670.png", "contributors": "henrybass" };
const file = "/Users/jchen/Documents/Programming/haxidraw/new/guides/cubic_disarray.md";
const url = void 0;
function rawContent() {
  return "\n**_Georg Nees_** was a pioneer of digital art, responsible for interesting works like Cubic Disarray.\n\n<img src=\"https://www.seekingoutside.com/wp-content/uploads/2018/12/Screen-Shot-2018-12-11-at-3.40.46-AM-480x670.png\" width=\"512\"/>\n\nLet's try to recreate this in the Haxidraw editor. A good first step to reverse engineering any artwork is to break it down into the obvious components. There's a grid of squares, and the squares closer to the bottom seem to be rotated more and more.\n\nWe can get started by setting up a turtle, and define some constants:\n\n```js\nconst t = createTurtle()\ndrawTurtles(t)\n\nconst size = 10\nconst squareSize = 1\n```\n\nObviously we'll need a way to draw these rotated squares, so let's define a function for that:\n\n```js\nfunction draw(x, y, width, height, theta) {\n  t.up()\n  let startX = x - height / 2\n  let startY = y - height / 2\n\n  t.goto(rotatePoints(x, y, startX, startY, theta))\n  t.down()\n  t.goto(rotatePoints(x, y, startX + width, startY, theta))\n  t.goto(rotatePoints(x, y, startX + width, startY + height, theta))\n  t.goto(rotatePoints(x, y, startX, startY + height, theta))\n  t.goto(rotatePoints(x, y, startX, startY, theta))\n  t.up()\n}\n```\n\nThis function takes in a `x`, `y` position, along with a `width` and `height` for the square. Lastly, we'll want a `theta` to rotate the points by. The function works by creating a square path, and rotating it around the center by a given amount. We still need to define how to do this rotation, though.\n\nThis can be done using the sine and cosine functions. They decompose a given angle into an x and y component, which we can use to preform the rotation. The function takes in:\n\n- An origin x and y to rotate around\n- The x and y to rotate\n- The angle to rotate by\n\nIt then returns the rotated points as an array.\n\n```js\nfunction rotatePoints(ox, oy, x, y, theta) {\n  let dx = x - ox\n  let dy = y - oy\n  let newX = dx * Math.cos(theta) - dy * Math.sin(theta)\n  let newY = dx * Math.sin(theta) + dy * Math.cos(theta)\n  return [newX + ox, newY + oy]\n}\n```\n\nGreat, we're almost done! Now it's down to simply drawing the grid. Loop over every x and y in some range, and draw a square there. We rotate them by a random amount, scaled proportional to how low the square is on the screen.\n\n```js\nfor (let x = 0; x < size; x++) {\n  for (let y = 0; y < size; y++) {\n    draw(x, y, squareSize, squareSize, (Math.random() - 0.5) * ((10 - y) / 10))\n  }\n}\n```\n\nAnd, you're done! The final result should look something like this in the editor:\n\n<img src=\"https://cloud-ot8pxbd0h-hack-club-bot.vercel.app/0image.png\" width=\"512\"/>\n";
}
function compiledContent() {
  return html;
}
function getHeadings() {
  return [];
}
async function Content() {
  const { layout, ...content } = frontmatter;
  content.file = file;
  content.url = url;
  const contentFragment = createVNode(Fragment, { "set:html": html });
  return contentFragment;
}
Content[Symbol.for("astro.needsHeadRendering")] = true;
export {
  Content,
  compiledContent,
  Content as default,
  file,
  frontmatter,
  getHeadings,
  images,
  rawContent,
  url
};
