import { i as createVNode, s as spreadAttributes, F as Fragment } from "./astro.2c740cbe.mjs";
import "html-escaper";
import "cookie";
import "kleur/colors";
import "path-to-regexp";
import "mime";
import "string-width";
const images = {};
function updateImageReferences(html2) {
  return html2.replaceAll(
    /__ASTRO_IMAGE_="([^"]+)"/gm,
    (full, imagePath) => spreadAttributes({ src: images[imagePath].src, ...images[imagePath].attributes })
  );
}
const html = updateImageReferences('<blockquote>\n<p>You can follow along in <a href="https://haxidraw.hackclub.dev/">this editor</a>.</p>\n</blockquote>\n<p>Let’s something like draw this:</p>\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/bcaf04e7-a00e-4f98-aaed-01eeebf2c79c" width="512">\n<h1 id="setting-up-workarea">Setting Up Workarea</h1>\n<p>Let’s start by centering the drawing we’ll make in the document.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">const</span> width <span class="token operator">=</span> <span class="token number">120</span>\n<span class="token keyword">const</span> height <span class="token operator">=</span> <span class="token number">120</span>\n\n<span class="token function">setDocDimensions</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> shapes <span class="token operator">=</span> <span class="token function">createTurtle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// this will be our container turtle</span>\n\nshapes<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shapes<span class="token punctuation">.</span>cc<span class="token punctuation">)</span> <span class="token comment">// this moves the center of our turtle to the center of our doc</span>\n\n<span class="token function">drawTurtles</span><span class="token punctuation">(</span>shapes<span class="token punctuation">)</span></code></pre>\n<h1 id="draw-a-square">Draw a Square</h1>\n<p>This function draws squares.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">function</span> <span class="token function">rect</span><span class="token punctuation">(</span><span class="token parameter">w<span class="token punctuation">,</span> h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">createTurtle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    t<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>\n    t<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>\n    t<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span>\n    t<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> t\n<span class="token punctuation">}</span></code></pre>\n<p>Let’s use it to add a square to our drawing.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token comment">// ...</span>\n\nshapes<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// here is the new line</span>\n\nshapes<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shapes<span class="token punctuation">.</span>cc<span class="token punctuation">)</span>\n\n<span class="token comment">// ...</span></code></pre>\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/6a9b273c-391e-4ee7-9036-114524589d09" width="512">\n<h1 id="make-a-grid">Make a Grid</h1>\n<p>First we’ll make a row. Start with a lot of squares.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">const</span> gridWidth <span class="token operator">=</span> <span class="token number">10</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> gridWidth<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n  shapes<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/df700565-f80b-434b-ae92-1b6a4ecbc36b" width="512">\n<p>We can’t see any change because they are on top of eachother! Space them out.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n  t<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">23</span> <span class="token operator">*</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  shapes<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/367f376f-a903-44ec-8e31-db7e8090782b" width="512">\n<p>If we want the spacing to be perfect, each square should move by the width of a square.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">const</span> squareWidth <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">rect</span><span class="token punctuation">(</span>squareWidth<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n  t<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>squareWidth <span class="token operator">*</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  shapes<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/4e9e02da-20e3-4b83-ba27-5e384163148f" width="512">\n<p>To make it a grid add another loop.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">const</span> squareWidth <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token keyword">const</span> squareHeight <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&#x3C;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">rect</span><span class="token punctuation">(</span>squareWidth<span class="token punctuation">,</span> squareHeight<span class="token punctuation">)</span>\n    t<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>squareWidth <span class="token operator">*</span> i<span class="token punctuation">,</span> squareHeight <span class="token operator">*</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    shapes<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/9b0fea0d-2b04-492b-9c3e-018bde669099" width="512">\n<p>Increase the loop range for a bigger grid.</p>\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/5408832c-2125-47af-9e84-0dd88c2fab67" width="512">\n<h1 id="add-some-disarray">Add Some Disarray</h1>\n<p>We can randomly translate each square.</p>\n<pre class="language-js"><code is:raw="" class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&#x3C;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">rect</span><span class="token punctuation">(</span>squareWidth<span class="token punctuation">,</span> squareHeight<span class="token punctuation">)</span>\n    t<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>squareWidth <span class="token operator">*</span> i<span class="token punctuation">,</span> squareHeight <span class="token operator">*</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// randomness added here</span>\n    t<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">randInRange</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">randInRange</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n    shapes<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/8f64548c-08dc-4709-85a8-cd941baf8438" width="512">\n<p>Scale the randomness with the x location.</p>\n<pre class="language-js"><code is:raw="" class="language-js">t<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token function">randInRange</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">randInRange</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/fb392a9b-4ec8-4eec-9f1f-035d67c4ea50" width="512">\n<p>Now rotate each square in a similar manner.</p>\n<pre class="language-js"><code is:raw="" class="language-js">t<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token function">randInRange</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">)</span></code></pre>\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/1a0902f1-084d-4651-a188-c1dbe6995289" width="512">\n<p>And that’s our piece!</p>\n<h1 id="extensions">Extensions</h1>\n<ul>\n<li>Can you adjust transformations based on x and y?</li>\n<li>Can you add scale to the transformations?</li>\n<li>Can you change the rectangle sizes?</li>\n</ul>');
const frontmatter = { "title": "Square Disarray", "thumbnail": "https://github.com/hackclub/haxidraw/assets/27078897/bcaf04e7-a00e-4f98-aaed-01eeebf2c79c", "contributors": "henrybass" };
const file = "/Users/jchen/Documents/Programming/haxidraw/new/guides/square-disarray.md";
const url = void 0;
function rawContent() {
  return '\n> You can follow along in [this editor](https://haxidraw.hackclub.dev/).\n\nLet\'s something like draw this:\n\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/bcaf04e7-a00e-4f98-aaed-01eeebf2c79c" width="512"/>\n\n# Setting Up Workarea\n\nLet\'s start by centering the drawing we\'ll make in the document.\n\n```js\nconst width = 120\nconst height = 120\n\nsetDocDimensions(width, height)\n\nconst shapes = createTurtle() // this will be our container turtle\n\nshapes.translate([width / 2, height / 2], shapes.cc) // this moves the center of our turtle to the center of our doc\n\ndrawTurtles(shapes)\n```\n\n# Draw a Square\n\nThis function draws squares.\n\n```js\nfunction rect(w, h) {\n  const t = createTurtle()\n\n  for (let i = 0; i < 2; i++) {\n    t.forward(w)\n    t.right(90)\n    t.forward(h)\n    t.right(90)\n  }\n\n  return t\n}\n```\n\nLet\'s use it to add a square to our drawing.\n\n```js\n// ...\n\nshapes.join(rect(10, 10)) // here is the new line\n\nshapes.translate([width / 2, height / 2], shapes.cc)\n\n// ...\n```\n\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/6a9b273c-391e-4ee7-9036-114524589d09" width="512"/>\n\n# Make a Grid\n\nFirst we\'ll make a row. Start with a lot of squares.\n\n```js\nconst gridWidth = 10\n\nfor (let i = 0; i < gridWidth; i++) {\n  const t = rect(10, 10)\n  shapes.join(t)\n}\n```\n\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/df700565-f80b-434b-ae92-1b6a4ecbc36b" width="512"/>\n\nWe can\'t see any change because they are on top of eachother! Space them out.\n\n```js\nfor (let i = 0; i < 3; i++) {\n  const t = rect(10, 10)\n  t.translate([23 * i, 0])\n  shapes.join(t)\n}\n```\n\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/367f376f-a903-44ec-8e31-db7e8090782b" width="512"/>\n\nIf we want the spacing to be perfect, each square should move by the width of a square.\n\n```js\nconst squareWidth = 10\nfor (let i = 0; i < 3; i++) {\n  const t = rect(squareWidth, 10)\n  t.translate([squareWidth * i, 0])\n  shapes.join(t)\n}\n```\n\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/4e9e02da-20e3-4b83-ba27-5e384163148f" width="512"/>\n\nTo make it a grid add another loop.\n\n```js\nconst squareWidth = 10\nconst squareHeight = 10\nfor (let i = 0; i < 3; i++) {\n  for (let j = 0; j < 3; j++) {\n    const t = rect(squareWidth, squareHeight)\n    t.translate([squareWidth * i, squareHeight * j])\n    shapes.join(t)\n  }\n}\n```\n\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/9b0fea0d-2b04-492b-9c3e-018bde669099" width="512"/>\n\nIncrease the loop range for a bigger grid.\n\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/5408832c-2125-47af-9e84-0dd88c2fab67" width="512"/>\n\n# Add Some Disarray\n\nWe can randomly translate each square.\n\n```js\nfor (let i = 0; i < 10; i++) {\n  for (let j = 0; j < 10; j++) {\n    const t = rect(squareWidth, squareHeight)\n    t.translate([squareWidth * i, squareHeight * j])\n\n    // randomness added here\n    t.translate([randInRange(-1, 1), randInRange(-1, 1)])\n\n    shapes.join(t)\n  }\n}\n```\n\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/8f64548c-08dc-4709-85a8-cd941baf8438" width="512"/>\n\nScale the randomness with the x location.\n\n```js\nt.translate([(randInRange(-1, 1) * i) / 6, (randInRange(-1, 1) * i) / 6])\n```\n\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/fb392a9b-4ec8-4eec-9f1f-035d67c4ea50" width="512"/>\n\nNow rotate each square in a similar manner.\n\n```js\nt.rotate(randInRange(-1, 1) * 2 * i)\n```\n\n<img src="https://github.com/hackclub/haxidraw/assets/27078897/1a0902f1-084d-4651-a188-c1dbe6995289" width="512"/>\n\nAnd that\'s our piece!\n\n# Extensions\n\n- Can you adjust transformations based on x and y?\n- Can you add scale to the transformations?\n- Can you change the rectangle sizes?\n';
}
function compiledContent() {
  return html;
}
function getHeadings() {
  return [{ "depth": 1, "slug": "setting-up-workarea", "text": "Setting Up Workarea" }, { "depth": 1, "slug": "draw-a-square", "text": "Draw a Square" }, { "depth": 1, "slug": "make-a-grid", "text": "Make a Grid" }, { "depth": 1, "slug": "add-some-disarray", "text": "Add Some Disarray" }, { "depth": 1, "slug": "extensions", "text": "Extensions" }];
}
async function Content() {
  const { layout, ...content } = frontmatter;
  content.file = file;
  content.url = url;
  const contentFragment = createVNode(Fragment, { "set:html": html });
  return contentFragment;
}
Content[Symbol.for("astro.needsHeadRendering")] = true;
export {
  Content,
  compiledContent,
  Content as default,
  file,
  frontmatter,
  getHeadings,
  images,
  rawContent,
  url
};
